#!/usr/bin/env python3

import sys
import os
import argparse
import csv
import functools
import pandas
from collections import defaultdict
import rpy2.robjects
from rpy2.robjects.packages import importr
from rpy2.robjects import pandas2ri
import numpy

pandas2ri.activate()

def sort_values(key, dictionary=dict()):
    return dictionary[key]["fpkm"]

def generate_plot(dataframe, jpeg):

    r = rpy2.robjects.r  # Start the R thread
    base = importr("base")
    
    graphics = importr('graphics')

    gplots = importr("gplots")
    color_brewer = importr("RColorBrewer")
    ggplot2 = importr("ggplot2")
    grdevices = importr("grDevices")

    dataframe = dataframe.sort(["fpkm"], ascending=False)
    greater_100 = len(dataframe[(dataframe.fpkm>100)].tid)
    hundred_to_ten = len(dataframe[(dataframe.fpkm <=100) & (dataframe.fpkm>10)].tid)
    ten_to_one = len(dataframe[(dataframe.fpkm > 1) & (dataframe.fpkm <= 10)].tid)
    zer_to_one = len(dataframe[(dataframe.fpkm > 0.01) & (dataframe.fpkm <=1)].tid)
    lowest = len(dataframe[(dataframe.fpkm<=0.01)].tid)

    data_matrix = base.data_matrix(dataframe[dataframe.columns[2:]])
    data_matrix.colnames = rpy2.robjects.vectors.StrVector(dataframe.columns[2:])
    tiff = grdevices.tiff(jpeg, width=13, height=13, units="in", res=300)
    
    colors = rpy2.robjects.vectors.StrVector(["white", "lightblue", "green", "black", "red"])

    rowSide = rpy2.robjects.vectors.StrVector(["gray"]*greater_100 + ["violet"]*hundred_to_ten +
                                              ["sky blue"]*ten_to_one +
                                              ["light green"]*zer_to_one +
                                              ["yellow"]*lowest)
    r.par(mai=rpy2.robjects.vectors.FloatVector([0,0,0,0]))
    gplots.heatmap_2(data_matrix, RowSideColors = rowSide,
                     density_info="none",
                     trace="none",
                     margins=rpy2.robjects.vectors.IntVector([18,15]),
                     col=colors,
                     breaks=numpy.arange(0.5, 6.5),
                     cexCol=2, cexMain=10,
                     par=r.par(cex_main=10),
                     cex_axis=1, cex_main=5, cex_lab=3, cex_sub=3,
                     col_axis="red", col_lab="red",
                     dendogram="none", key=False,
                     Rowv="NA", Colv="NA")

    r.legend("top", fill = colors,
             legend = rpy2.robjects.vectors.StrVector(["1.No Overlap", "2.Generic Overlap (j,o,e)",
                                                       "3.Contained (c)", "4 Fusion",
                                                       "5.Complete match of intron chain (=)"]),
             cex=1.5,
             title = "Class code legend")


    # r.title(main="Reconstruction by FPKM", cex_main=20, cex_axis=10, col_main="red")
    # graphics.par(col_main="red", cex_main=20)

    r.legend("left",
             legend = rpy2.robjects.vectors.StrVector([">100 FPKM", "10-100FPKM",
                                                       "1-10FPKM", "0.01-1FPKM", "upto 0.01FPKM"]),
             col = rpy2.robjects.vectors.StrVector(["gray", "violet",
                                                    "sky blue", "light green", "yellow"]),
             cex=1.5,
             lty = 1, lwd = 10, title="FPKM")

   
    grdevices.dev_off()

def analyse_folder(input_file, label, values):
    # Retrieve ccodes
    refmap = open(input_file)

    ids_not_found = set()
    for row in csv.DictReader(refmap, delimiter="\t"):
        ccode = row["ccode"]
        if ccode[0] == "f":
            ccode = 4
        elif ccode == "NA":
            ccode =1
        elif ccode == "c":
            ccode = 3
        elif ccode in ("_","="):
            ccode = 5
        else:
            ccode = 2
        if row["ref_id"] not in values:
            ids_not_found.add(row["ref_id"]) 
            continue
        values[row["ref_id"]][label] = ccode

    if len(ids_not_found) > 0:
        print("# of ids not found for {0}: {1}".format(
            input_file, len(ids_not_found)),
              file=sys.stderr
        )

    return values

def main():

    parser = argparse.ArgumentParser("Script to create the merged ccode/FPKM input for Gemy's modified script.")
    parser.add_argument("--quant_file", "-q",
                        required=True,
                        type=argparse.FileType("r"))
    parser.add_argument("-l", "--labels", default=None, type=str,
                        help="Labels for the input files, comma separated. Required.", required=True)
    parser.add_argument("--out", nargs="?", type=str, default="expression.tiff",
                        help="Optional output file name. Default: %(default)s")
    parser.add_argument("input_files", help="The RefMap input files", nargs="+")
    args = parser.parse_args()

    args.labels = args.labels.split(",")
    if len(args.labels) != len(args.input_files):
        raise ValueError("Labels must be the same number as input files!")        

    # Create data dictionary
    values = dict()

    # Retrieve FPKM
    for row in csv.DictReader(args.quant_file, delimiter="\t"):
        values[row["tracking_id"]]=dict()
        values[row["tracking_id"]]["fpkm"] = float(row["FPKM"])
        values[row["tracking_id"]]["tid"] = row["tracking_id"]

    names = []
    for input_file,label in zip(args.input_files, args.labels):
        values = analyse_folder(input_file, label, values)

    data = defaultdict(list)

    sorter = functools.partial(sort_values, **{"dictionary": values})
    keys = None
    for tid in values:
        if keys is None:
            print(values[tid].keys())
            keys = values[tid].keys()
        for key in values[tid]:
            data[key].append(values[tid][key])

            #        out.writerow(values[tid])
    data = pandas.DataFrame(data, columns=["tid", "fpkm"] + args.labels)
    generate_plot(data, args.out)

    return

main()
